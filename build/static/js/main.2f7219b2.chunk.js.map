{"version":3,"sources":["api/index.js","components/Feature.js","components/Title.js","components/Loading.js","components/Search.js","components/Preview.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","Fragment","toLowerCase","map","person","idx","key","prefix","name","class","length","image","src","baseimageurl","photosHTML","Title","PureComponent","Loading","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuryResults","classificationResults","catch","onSubmit","htmlFor","type","placeholder","onChange","target","item","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","index","alt","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f7219b2.chunk.js","sourcesContent":["export const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=cdddd6bb-a8d7-42e4-9789-a17d599859a6';\n\n\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${BASE_URL}/object?${KEY}&${term}=${encodeURI(value.split('-').join('|'))}`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n    const {\n        searchTerm,\n        searchValue,\n        setIsLoading,\n        setSearchResults\n    } = props;\n\n\n    return <span className=\"content\">\n        <a href=\"#\" onClick={async (event) => {\n            event.preventDefault();\n            setIsLoading(true);\n            try {\n                const results = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n                setSearchResults(results);\n            } catch (error) {\n                console.error(error)\n            } finally {\n                setIsLoading(false);\n            }\n        }}>{searchValue}</a>\n    </span>\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\n\n{/* <Searchable culture={culture} technique={technique} medium={medium} /> */ }\n\nfunction photosHTML(images, primaryimageurl) {\n    if (images) {\n        if (images.length > 0) {\n            return images.map(image => <img src={image.baseimageurl} />);\n        } else if (primaryimageurl) {\n            return [<img src={primaryimageurl} />]\n        } else {\n            return [];\n        }\n    } else return '';\n}\n\nconst Feature = (props) => {\n\n    const { featuredResult, setIsLoading, setSearchResults } = props;\n\n    const {\n        title,\n        dated,\n        images,\n        primaryimageurl,\n        description,\n        culture,\n        style,\n        technique,\n        medium,\n        dimensions,\n        people,\n        department,\n        division,\n        contact,\n        creditline\n    } = featuredResult || {};\n\n    if (!featuredResult) {\n        return <main id=\"feature\"></main>\n    } else {\n        return <main id=\"feature\">\n            <div className=\"object-feature\">\n                <header>\n                    <h3>{title}</h3>\n                    <h4>{dated}</h4>\n                </header>\n                <section className=\"facts\">\n\n                    {description ?\n                        <React.Fragment>\n                            <span className=\"title\"> Description</span>\n                            <span className=\"content\">{description}</span>\n                        </React.Fragment> : null}\n                    {culture ?\n                        <React.Fragment>\n                            <span className=\"title\">Culture</span>\n                            <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'culture'} searchValue={culture}></Searchable></span>\n                        </React.Fragment> : null}\n                    {style ?\n                        <React.Fragment>\n                            <span className=\"title\">Style</span>\n                            <span className=\"content\">{style}</span>\n                        </React.Fragment> : null}\n\n                    {technique ?\n                        <React.Fragment>\n                            <span className=\"title\">Technique</span>\n                            <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'technique'} searchValue={technique}></Searchable></span>\n                        </React.Fragment> : null}\n\n                    {medium ?\n                        <React.Fragment>\n                            <span className=\"title\">Medium</span>\n                            <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'medium'} searchValue={medium.toLowerCase()}></Searchable></span>\n                        </React.Fragment> : null}\n\n                    {dimensions ?\n                        <React.Fragment>\n                            <span className=\"title\">Dimensions</span>\n                            <span className=\"content\">{dimensions}</span>\n                        </React.Fragment> : null}\n\n                    {people ?\n                        <React.Fragment>\n                            <span className=\"title\">People</span>\n                            {\n                                people ?\n                                    people.map((person, idx) => {\n                                        return <span key={idx} className=\"content\">{person.prefix} <Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'person'} searchValue={person.name}></Searchable></span>\n                                    }) : null\n                            }\n                        </React.Fragment> : null}\n\n\n                    {title ?\n                        <React.Fragment>\n                            <span className=\"title\">Department</span>\n                            <span className=\"content\">{department}</span>\n                        </React.Fragment> : null}\n\n                    {division ?\n                        <React.Fragment>\n                            <span className=\"title\">Division</span>\n                            <span className=\"content\">{division}</span>\n                        </React.Fragment> : null}\n\n                    {contact ?\n                        <React.Fragment>\n                            <span className=\"title\">Contact</span>\n                            <span className=\"content\">{contact}</span>\n                        </React.Fragment> : null}\n\n                    {creditline ?\n                        <React.Fragment>\n                            <span className=\"title\">Credit</span>\n                            <span className=\"content\">{creditline}</span>\n                        </React.Fragment> : null}\n\n                </section>\n                <section class=\"photos\">\n                    {photosHTML(images, primaryimageurl)}\n                </section>\n            </div>\n        </main>\n    }\n}\nexport default Feature;","import React from 'react';\nimport { PureComponent } from 'react';\n\n// Create/export a component called Title which uses this static HTML as the template:\n\nclass Title extends PureComponent {\n    render() {\n        return <div id=\"title\">\n            <h1>\n                The Art Collector\n   </h1>\n            <h5>\n                Search the Harvard Art Museums' Private Collections\n   </h5>\n        </div>\n    }\n}\n\n\nexport default Title;","import React from 'react';\nimport { PureComponent } from 'react';\n\nclass Loading extends PureComponent {\n    render() {\n        return <div id=\"loading\">\n            <h2 className=\"message\">Searching...</h2>\n        </div>\n    }\n}\n\n\nexport default Loading;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  const {\n    setIsLoading,\n    setSearchResults\n  } = props;\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(([centuryResults, classificationResults]) => {\n        setCenturyList(centuryResults);\n        setClassificationList(classificationResults);\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }, []);\n\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(results);\n    }\n    catch (error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input\n        id=\"keywords\"\n        type=\"text\"\n        placeholder=\"enter keywords...\"\n        value={queryString}\n        onChange={(event) => setQueryString(event.target.value)} />\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({classificationList.length})</span></label>\n      <select\n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification}\n        onChange={event => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((item, idx) => {\n          return <option key={idx} value={item.name}>{item.name}</option>\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({centuryList.length})</span></label>\n      <select\n        name=\"century\"\n        id=\"select-century\"\n        value={century}\n        onChange={event => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((item, idx) => {\n          return <option key={idx} value={item.name}>{item.name}</option>\n        })}\n      </select>\n    </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\nexport default Search;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  const {\n    setSearchResults,\n    setFeaturedResult,\n    setIsLoading,\n  } = props;\n\n  const {\n    info,\n    records\n  } = props.searchResults;\n\n\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button\n        disabled={!info.prev ? true : false}\n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next ? true : false}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        records.map((record, index) => {\n          return <div\n            key={index}\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault();\n              setFeaturedResult(record);\n            }}>\n\n            <img src={record.primaryimageurl ? record.primaryimageurl : null} alt={record.description ? record.description : null} />\n            <h3> {record.title ? record.title : \"MISSING INFO\"}</h3>\n          </div>\n        })\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult} />\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {isLoading ? <Loading /> : null} {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */"],"sourceRoot":""}